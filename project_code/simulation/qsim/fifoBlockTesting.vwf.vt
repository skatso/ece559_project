// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/14/2016 16:24:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          fifoBlock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fifoBlock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [7:0] input;
reg reset;
reg write_enable;
// wires                                               
wire [7:0] output;

// assign statements (if any)                          
fifoBlock i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.\input (input),
	.\output (output),
	.reset(reset),
	.write_enable(write_enable)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 
// \input [ 7 ]
initial
begin
	input[7] = 1'b0;
	input[7] = #80000 1'b1;
	input[7] = #40000 1'b0;
	input[7] = #120000 1'b1;
	input[7] = #40000 1'b0;
	input[7] = #80000 1'b1;
	input[7] = #240000 1'b0;
	input[7] = #120000 1'b1;
	input[7] = #80000 1'b0;
	input[7] = #40000 1'b1;
	input[7] = #40000 1'b0;
	input[7] = #40000 1'b1;
end 
// \input [ 6 ]
initial
begin
	input[6] = 1'b1;
	input[6] = #40000 1'b0;
	input[6] = #40000 1'b1;
	input[6] = #80000 1'b0;
	input[6] = #40000 1'b1;
	input[6] = #120000 1'b0;
	input[6] = #40000 1'b1;
	input[6] = #40000 1'b0;
	input[6] = #40000 1'b1;
	input[6] = #40000 1'b0;
	input[6] = #40000 1'b1;
	input[6] = #240000 1'b0;
	input[6] = #120000 1'b1;
	input[6] = #40000 1'b0;
	input[6] = #40000 1'b1;
end 
// \input [ 5 ]
initial
begin
	input[5] = 1'b0;
	input[5] = #80000 1'b1;
	input[5] = #80000 1'b0;
	input[5] = #40000 1'b1;
	input[5] = #40000 1'b0;
	input[5] = #40000 1'b1;
	input[5] = #160000 1'b0;
	input[5] = #40000 1'b1;
	input[5] = #40000 1'b0;
	input[5] = #40000 1'b1;
	input[5] = #40000 1'b0;
	input[5] = #80000 1'b1;
	input[5] = #40000 1'b0;
	input[5] = #80000 1'b1;
	input[5] = #80000 1'b0;
	input[5] = #40000 1'b1;
end 
// \input [ 4 ]
initial
begin
	input[4] = 1'b0;
	input[4] = #40000 1'b1;
	input[4] = #40000 1'b0;
	input[4] = #40000 1'b1;
	input[4] = #40000 1'b0;
	input[4] = #40000 1'b1;
	input[4] = #40000 1'b0;
	input[4] = #80000 1'b1;
	input[4] = #80000 1'b0;
	input[4] = #40000 1'b1;
	input[4] = #160000 1'b0;
	input[4] = #160000 1'b1;
	input[4] = #40000 1'b0;
	input[4] = #80000 1'b1;
	input[4] = #80000 1'b0;
end 
// \input [ 3 ]
initial
begin
	input[3] = 1'b1;
	input[3] = #40000 1'b0;
	input[3] = #40000 1'b1;
	input[3] = #360000 1'b0;
	input[3] = #40000 1'b1;
	input[3] = #40000 1'b0;
	input[3] = #40000 1'b1;
	input[3] = #40000 1'b0;
	input[3] = #80000 1'b1;
	input[3] = #120000 1'b0;
	input[3] = #40000 1'b1;
	input[3] = #40000 1'b0;
	input[3] = #80000 1'b1;
end 
// \input [ 2 ]
initial
begin
	input[2] = 1'b1;
	input[2] = #40000 1'b0;
	input[2] = #120000 1'b1;
	input[2] = #120000 1'b0;
	input[2] = #40000 1'b1;
	input[2] = #40000 1'b0;
	input[2] = #40000 1'b1;
	input[2] = #120000 1'b0;
	input[2] = #160000 1'b1;
	input[2] = #80000 1'b0;
	input[2] = #40000 1'b1;
	input[2] = #40000 1'b0;
	input[2] = #40000 1'b1;
	input[2] = #40000 1'b0;
end 
// \input [ 1 ]
initial
begin
	input[1] = 1'b0;
	input[1] = #40000 1'b1;
	input[1] = #120000 1'b0;
	input[1] = #40000 1'b1;
	input[1] = #40000 1'b0;
	input[1] = #40000 1'b1;
	input[1] = #40000 1'b0;
	input[1] = #40000 1'b1;
	input[1] = #40000 1'b0;
	input[1] = #80000 1'b1;
	input[1] = #240000 1'b0;
	input[1] = #40000 1'b1;
	input[1] = #40000 1'b0;
	input[1] = #120000 1'b1;
	input[1] = #40000 1'b0;
end 
// \input [ 0 ]
initial
begin
	input[0] = 1'b1;
	input[0] = #280000 1'b0;
	input[0] = #200000 1'b1;
	input[0] = #80000 1'b0;
	input[0] = #80000 1'b1;
	input[0] = #80000 1'b0;
	input[0] = #80000 1'b1;
	input[0] = #40000 1'b0;
	input[0] = #80000 1'b1;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #440000 1'b0;
end 

// write_enable
initial
begin
	write_enable = 1'b0;
	write_enable = #220000 1'b1;
	write_enable = #500000 1'b0;
end 
endmodule

